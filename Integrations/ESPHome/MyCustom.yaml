number:
  - platform: template
    name: SCD40 Humidity Offset
    id: scd40_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: SCD40 Temperature Offset
    id: scd40_temperature_offset
    initial_value: 6.2
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: dps310 Temperature Offset
    id: dps310_temperature_offset
    initial_value: 12.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°F"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box


sensor:
  - platform: scd4x
    id: !extend scd40
    co2:
      name: "CO2"
      id: "co2"
    automatic_self_calibration: false
    update_interval: 60s
    measurement_mode: "periodic"
    i2c_id: bus_a
    ambient_pressure_compensation_source: dps310pressure
    humidity:
      name: "SCD40 Humidity"
      id: scd40_humidity
      accuracy_decimals: 0
      filters:
        - lambda: return x - id(scd40_humidity_offset).state;
    temperature:
      name: "SCD40 Temperature"
      id: scd40_temperature
      accuracy_decimals: 1
      filters:
        - lambda: return x - id(scd40_temperature_offset).state;

  - platform: dps310
    id: !extend dps_310
    pressure:
      name: "DPS310 Pressure"
      id: dps310pressure
      accuracy_decimals: 1
    temperature:
      name: "DPS310 Temperature"
      id: dps310temperature
      accuracy_decimals: 1
      unit_of_measurement: '°F'
      filters:
        - lambda: return x * (9.0/5.0) + 32.0 - id(dps310_temperature_offset).state;
    update_interval: 5s
    i2c_id: bus_a 

  - platform: mics_4514
    id: !extend mics4514
    nitrogen_dioxide: !remove
      name: Nitrogen Dioxide
    carbon_monoxide: !remove
      name: Carbon Monoxide
    hydrogen: !remove
      name: Hydrogen
    ethanol: !remove
      name: Ethanol
    methane: !remove
      name: Methane
    ammonia: !remove
      name: Ammonia
    update_interval: 10s

  - platform: template
    name: "PM 0.3 To 1 µm"
    id: !extend pm0_3_to_1
    disabled_by_default: false
    lambda: return id(pm_1_0).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s
  
  - platform: template
    name: "PM 1 To 2.5 µm"
    id: !extend pm1_to_2_5
    disabled_by_default: false
    lambda: return id(pm_2_5).state - id(pm_1_0).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s
  
  - platform: template
#    name: !extend "PM 2.5 To 4 µm"
    id: pm2_5_to_4
    disabled_by_default: false
    lambda: return id(pm_4_0).state - id(pm_2_5).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s

  - platform: template
#    name: !extend "PM 4 To 10 µm"
    id: pm4_to_10
    disabled_by_default: false
    lambda: return id(pm_10_0).state - id(pm_4_0).state;
    unit_of_measurement: "µg/m³"
    icon: mdi:air-filter
    update_interval: 10s
  
text_sensor:
  - id: !remove voc_quality

  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 150) {
        return std::string("Good");} 
      else if (id(sen55_voc).state < 250) {
        return std::string("Moderate");} 
      else if (id(sen55_voc).state < 400) {
        return std::string("High");} 
      else {
        return std::string("Very High");}

  - platform: template
    name: "CO2 Quality"
    id: co2_ppm
    icon: mdi:air-filter
    lambda: |-
      if (id(co2).state < 1000) {
        return std::string("Good");} 
      else if (id(sen55_voc).state < 2000) {
        return std::string("Acceptable");} 
      else if (id(sen55_voc).state < 5000) {
        return std::string("Poor");} 
      else {
        return std::string("Very Poor");}
        
  - platform: wifi_info
    ip_address:
      name: " IP"
      icon: "mdi:ip-outline"

switch:
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
 
#Used To Control RGB Light On Startup. Tells User Status Of Device
interval:
  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) < 30;'
            - switch.is_on: startup_light_blink

          then:
            - light.toggle:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) > 30;'
            - lambda: 'return id(cycleCounter) < 31;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_off:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;'

